import loggingfrom django.contrib.auth.models import Userfrom ..models import Events, Recordsfrom django.db.utils import IntegrityErrorlogger = logging.getLogger(__name__)logger.setLevel(level=logging.INFO)handler = logging.FileHandler(    filename=f"app.log", encoding='UTF-8')formatter = logging.Formatter("%(asctime)s %(levelname)s %(message)s")handler.setFormatter(formatter)logger.addHandler(handler)class Result:    def __init__(self, exception: Exception = None, **kwargs):        self.exception = exception        self.kwargs = kwargs if kwargs else None    def __getattr__(self, attr):        match attr:            case 'error':                return self._error            case _:                return self.__dict__[attr]    def __setattr__(self, attr, value):        match attr:            case 'exception':                if isinstance(value, Exception):                    self.__dict__.update({                        'is_error': True,                        'is_success': False,                        '_error': {value.__str__(), value.args}                    })            case _:                if isinstance(value, dict):                    self.__dict__.update({                        'is_success': True,                        'is_error': False,                        **value                    })    def __or__(self, other):        kwargs = self.__dict__        return other(**kwargs)    def write_to_logs(self):        passclass ServiceObject:    def __init__(self):        self.result = Result    def service_success(self, **success) -> 'Result':        result = self.result(**success)        return result    def service_error(self, exception: Exception) -> 'Result':        result = self.result(exception=exception)        return resultclass EventGetService(ServiceObject):    def get_event(self, event_id: int) -> 'Result':        try:            event = _get_event_from_db(event_id=event_id)        except Events.DoesNotExist as exc:            return self.service_error(exception=exc)        else:            return self.service_success(event=event)    def __call__(self, event_id: int):        return self.get_event(event_id=event_id)def _get_event_from_db(event_id: int):    return Events.objects.get(id=event_id)class EventPostService(ServiceObject):    def create_event(self, name: str, date: str) -> 'Result':        try:            event = _create_event_in_db(name=name, date=date)        except IntegrityError as exc:            return self.service_error(exception=exc)        else:            return self.service_success(event=event)    def __call__(self, name: str, date: str):        return self.create_event(name=name, date=date)def _create_event_in_db(name: str, date: str):    event = Events.objects.create(name=name, date=date)    return eventclass UserGetService(ServiceObject):    def get_user(self, user_id: int) -> 'Result':        try:            user = User.objects.get(id=user_id)        except User.DoesNotExist as exc:            return self.service_error(exception=exc)        else:            return self.service_success(user=user)    def __call__(self, user_id: int) -> 'Result':        return self.get_user(user_id=user_id)class RecordPostService(ServiceObject):    def __init__(self):        super().__init__()        self.get_event = EventGetService()        self.get_user = UserGetService()    def _get_user(self, user_id: int, **kwargs):        try:            user = self.get_user(user_id=user_id).user        except KeyError as exc:            logger.info('User does not kwargs %s', kwargs)            kwargs.update(                {                    '_error': {exc.__str__(): exc},                    'is_error': True,                    'is_success': False                }            )        else:            logger.info('_get_user: user %s', user)            kwargs.update(user=user)            logger.info('_get_user: kwargs %s', kwargs)        return self.service_success(**kwargs)    def _get_event(self, event_id: int, **kwargs):        try:            event = self.get_event(event_id=event_id).event        except KeyError as exc:            kwargs['_error'].update({exc.__str__(): exc})        else:            logger.info('_get_event: event %s', event)            kwargs.update(event=event)            logger.info('_get_event: kwargs %s', kwargs)        return self.service_success(**kwargs)    def create_record(self, **kwargs):        try:            logger.info('_create_record kwargs: %s', kwargs)            record = _create_record_in_db(**kwargs)        except TypeError:            return self.service_success(**kwargs)            # return self.service_error(exception=exc)        else:            return self.service_success(record=record)    def __call__(self, event_id: int, reminder_time: int, user_id: int):        logger.info(            'Starting record post service : event %s user %s reminder time %s',            event_id, user_id, reminder_time        )        return self.service_success(            event_id=event_id, reminder_time=reminder_time, user_id=user_id        ) | self._get_user | self._get_event | self.create_recorddef _create_record_in_db(user: 'User', event: 'Events', reminder_time: int, **kwargs):    record = Records.objects.create(user=user, event=event, reminder_time=reminder_time)    return record