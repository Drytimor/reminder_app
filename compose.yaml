services:
  app:
    build:
      context: .
    ports:
      - '8000:8000'
    env_file:
      - ./dev.env
    develop:
      watch:
        - action: sync
          path: .
          target: src/reminder
        - action: rebuild
          path: requirements.txt
        - action: rebuild
          path: ./reminder/settings
    depends_on:
      db:
        condition: service_healthy
        restart: true
#      celery:
#        condition: service_healthy
#        restart: true

  db:
     image: postgres:16.1-alpine3.19
     restart: always
     volumes:
       - db-data:/var/lib/postgresql/data
     env_file:
       - ./dev.env
     expose:
       - '5432'
     healthcheck:
       test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]

#  rabbitmq:
#    image: rabbitmq:3.13.0-rc.4-management-alpine
#    healthcheck:
#      test: ['CMD-SHELL', 'rabbitmq-diagnostics status']
#    env_file:
#      - ./dev.env
#    ports:
#      - '5672:5672'
#      - '15671:15672'
#
#  redis-stack:
#    image: redis:7.2.4-alpine3.19
#    healthcheck:
#      test: ['CMD-SHELL', 'redis-cli ping']
#    ports:
#      - '6379:6379'
#
#  celery:
#    build:
#      context: .
#    volumes:
#      - db-data:/var/lib/celery/data
#    command: >
#      sh -c 'celery -A reminder worker -l INFO'
#    depends_on:
#      redis-stack:
#        condition: service_healthy
#        restart: true
#      rabbitmq:
#        condition: service_healthy
#        restart: true
#    healthcheck:
#      test: ['CMD-SHELL', 'celery inspect ping']
#    env_file:
#      - ./dev.env
#
#  celery-beat:
#    build:
#      context: .
#    volumes:
#      - db-data:/var/lib/celery-beat/data
#    command: >
#      sh -c 'celery -A reminder beat -l info'
#    depends_on:
#      rabbitmq:
#        condition: service_healthy
#    env_file:
#      - ./dev.env
#
#  flower:
#    image: mher/flower
#    ports:
#      - '5555:5555'
#    command: >
#      sh -c 'celery flower --port=5555 --broker_api=$${FLOWER_BROKER_API_URL}'
#    depends_on:
#      app:
#        condition: service_started
#      celery:
#        condition: service_healthy
#        restart: true
#    env_file:
#      - ./dev.env

volumes:
 db-data:
